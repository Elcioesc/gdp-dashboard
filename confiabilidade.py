# modules/confiabilidade.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from lifelines import WeibullFitter

def exibir_confiabilidade():
    st.title("üî¨ An√°lise de Confiabilidade")
    
    arquivo = st.file_uploader(
        "üìä Dados de Falhas", 
        type=["xlsx"],
        key="confiabilidade_upload"
    )
    
    if arquivo:
        try:
            df = pd.read_excel(arquivo)
            
            # Verifica√ß√£o e tratamento dos dados
            if 'Tempo entre falhas (h)' not in df.columns:
                raise ValueError("Coluna 'Tempo entre falhas (h)' n√£o encontrada. Verifique o nome da coluna.")
                
            tempos = df['Tempo entre falhas (h)'].dropna().values
            
            if len(tempos) < 2:
                raise ValueError("N√∫mero insuficiente de dados (m√≠nimo 2 registros) para realizar a an√°lise de confiabilidade.")
                
            # Ajuste Weibull
            wf = WeibullFitter()
            wf.fit(tempos)
            
            # Prepara√ß√£o dos dados para o gr√°fico
            # Garante que x_values n√£o seja vazio e tenha um range razo√°vel
            if max(tempos) == 0: # Evita divis√£o por zero ou range inadequado
                x_values = np.linspace(0, 100, 200) # Define um range padr√£o se todos os tempos forem zero
            else:
                x_values = np.linspace(0, max(tempos) * 1.2, 200)
            
            y_values = 1 - wf.predict(x_values)
            
            # Cria√ß√£o do gr√°fico
            fig = px.line(
                x=x_values,
                y=y_values,
                title="Curva de Confiabilidade Weibull (R(t))",
                labels={'x': 'Tempo (horas)', 'y': 'Confiabilidade R(t)'}
            )
            fig.update_layout(xaxis_title="Tempo (horas)", yaxis_title="Confiabilidade R(t)")
            st.plotly_chart(fig, use_container_width=True)
            
            # Exibi√ß√£o dos par√¢metros
            beta = wf.rho_
            eta = wf.lambda_
            
            col1, col2 = st.columns(2)
            col1.metric("Œ≤ (Forma)", f"{beta:.2f}")
            col2.metric("Œ∑ (Vida Caracter√≠stica)", f"{eta:.2f} horas")
            
            # Interpreta√ß√£o dos par√¢metros
            st.subheader("Interpreta√ß√£o do Par√¢metro Œ≤ (Forma)")
            if beta < 1:
                st.info("üü¢ **Œ≤ < 1 (Falhas Infantis):** A taxa de falha est√° diminuindo com o tempo. Isso √© comum no in√≠cio da vida de um componente e pode ser devido a defeitos de fabrica√ß√£o ou instala√ß√£o inadequada. A√ß√µes focadas em **inspe√ß√£o inicial rigorosa** e **per√≠odo de amadurecimento (burn-in)** podem ser √∫teis.")
            elif 0.9 <= beta <= 1.1: # Usando uma pequena margem para "aproximadamente 1"
                st.info("üü° **Œ≤ ‚âà 1 (Falhas Aleat√≥rias):** A taxa de falha √© aproximadamente constante ao longo do tempo. Isso geralmente indica falhas s√∫bitas e imprevis√≠veis, n√£o relacionadas ao desgaste. A√ß√µes de **manuten√ß√£o preventiva baseada em tempo** ou **condi√ß√£o** podem n√£o ser eficazes; a **manuten√ß√£o corretiva** e o **monitoramento** s√£o mais relevantes.")
            else: # beta > 1.1
                st.warning("üî¥ **Œ≤ > 1 (Desgaste):** A taxa de falha est√° aumentando com o tempo. Isso √© t√≠pico de componentes que est√£o se desgastando. A√ß√µes de **manuten√ß√£o preventiva baseada em tempo (substitui√ß√µes programadas)** ou **manuten√ß√£o preditiva (monitoramento de condi√ß√£o)** s√£o altamente recomendadas para evitar falhas catastr√≥ficas.")
                
            st.markdown("---")
            st.subheader("O que √© Œ∑ (Vida Caracter√≠stica)?")
            st.info(f"O par√¢metro **Œ∑ (Eta)**, ou Vida Caracter√≠stica ({eta:.2f} horas), √© o tempo no qual aproximadamente **63.2%** dos itens de uma popula√ß√£o falharam. √â um indicador importante da 'vida √∫til' do componente sob an√°lise.")


        except ValueError as ve:
            st.error(f"Erro nos dados: {str(ve)}")
            st.info("Por favor, verifique se seu arquivo Excel possui a coluna 'Tempo entre falhas (h)' e se os dados s√£o num√©ricos e suficientes.")
        except Exception as e:
            st.error(f"Ocorreu um erro inesperado: {str(e)}")
            st.info("Certifique-se de que o arquivo Excel est√° formatado corretamente e tente novamente.")